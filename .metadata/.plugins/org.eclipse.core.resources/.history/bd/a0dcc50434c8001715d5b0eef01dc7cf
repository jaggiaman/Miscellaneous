package mst;
import java.util.LinkedList;
import java.util.Queue;
public class MST 
{ 
	 
	    // A utility function to find the vertex with minimum key
	    // value, from the set of vertices not yet included in MST
	    int minKey(int key[], Boolean mstSet[], int V)
	    {
	        // Initialize min value
	        int min = Integer.MAX_VALUE, min_index=-1;
	 
	        for (int v = 1; v <= V; v++)
	            if (mstSet[v] == false && key[v] < min)
	            {
	                min = key[v];
	                min_index = v;
	            }
	 
	        return min_index;
	    }
	 
	    // A utility function to print the constructed MST stored in
	    // parent[]
	    void printMST(int parent[], Graph graph)
	    {
	        System.out.println("Edge   Weight");
	        for (int i = 2; i <= graph.vertices; i++)
	            System.out.println(parent[i]+" - "+ i+"    "+
	                               graph.getEdge(i, parent[i]));
	    }
	 
	    // Function to construct and print MST for a graph represented
	    //  using adjacency matrix representation
	    void findMst(Graph graph,int source)
	    {
	        // Array to store constructed MST
	    	int vertices=graph.vertices;
	        int parent[] = new int[vertices+1];
	 
	        // Key values used to pick minimum weight edge in cut
	        int key[] = new int [vertices+1];
	 
	        // To represent set of vertices not yet included in MST
	        Boolean mstSet[] = new Boolean[vertices+1];
	 
	        // Initialize all keys as INFINITE
	        for (int i = 1; i <= vertices; i++)
	        {
	            key[i] = Integer.MAX_VALUE;
	            mstSet[i] = false;
	        }
	 
	        // Always include first 1st vertex in MST.
	        key[source] = 0;     // Make key 0 so that this vertex is
	                        // picked as first vertex
	        parent[source] = -1; // First node is always root of MST
	 
	       
	        for (int count = 1; count <= vertices-1; count++)
	        {
	            // Pick thd minimum key vertex from the set of vertices
	            // not yet included in MST
	            int min = minKey(key, mstSet, vertices);
	 
	            // Add the picked vertex to the MST Set
	            mstSet[min] = true;
	 
	            // Update key value and parent index of the adjacent
	            // vertices of the picked vertex. Consider only those
	            // vertices which are not yet included in MST
	            for (int v = 1; v <= vertices; v++)
	 
	                // graph[u][v] is non zero only for adjacent vertices of m
	                // mstSet[v] is false for vertices not yet included in MST
	                // Update the key only if graph[u][v] is smaller than key[v]
	                if (graph.getEdge(min, v)!=0 && mstSet[v] == false &&
	                		graph.getEdge(min, v) <  key[v])
	                {
	                    parent[v]  = min;
	                    key[v] = graph.getEdge(min, v);
	                }
	        }
	 
	        // print the constructed MST
	        printMST(parent, graph);
	    }
}